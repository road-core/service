#! /bin/sh

# Try whether the PostgreSQL in container accepts connections.
#
# With --live, be tolerant to starting PG server.  If the /bin/postgres binary
# has not been executed yet (the shell script is initializing the container),
# wait for it (this script might run forever, we expect that the timeout is
# maintained externally).

test -d /proc || { echo "/proc directory not found. Container is not healthy."; exit 1; }

if test x"$1" = "x--live"; then
    # Since livenessProbe is about to detect container deadlocks, and we
    # so far don't know about real deadlocks to be detected -- we keep
    # liveness probe to report that container is always ready
    exit 0
fi

# Readiness check follows, the --timeout is set to "infinite" because it
# is handled externally (readinessProbe.timeoutSeconds).
pg_isready -q \
    -h 127.0.0.1 \
    ${POSTGRESQL_USER+-U "$POSTGRESQL_USER"} \
    ${POSTGRESQL_DATABASE+-d "$POSTGRESQL_DATABASE"} \
    --timeout 0
